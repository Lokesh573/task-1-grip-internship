# -*- coding: utf-8 -*-
"""task1 data science and business analytics

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UYtO5_WXrlsRGD_XR63I3FPKLZTW5vzX

GRIP - THE SPARK FOUNDATION
DATA SCIENCE & BUSINESS ANALYTICS INTERN
Author: PANGULURI LOKESH
TASK1:PREDICTION USING SUPERVISED ML

* predict the percentage of a student based on the number on the no.of study hours
this is a simple linear regression task as it involvoes just to variables.
you can use R,Python,SAS enterprise minor or any other tool.
data can be found at http://bit.ly/w-data
what will predicted score if a student studies for 9.25 hours/day
"""

from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

url = '/content/student_scores - student_scores.csv'
sample_data = pd.read_csv(url)
print("Data import successful")
sample_data.head(10)

sample_data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

X = sample_data.iloc[:, :-1].values  
y = sample_data.iloc[:, 1].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 
regressor = LinearRegression()  
regressor.fit(X_train.reshape(-1,1), y_train) 

print("Training complete.")

line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line,color='red');
plt.show()

print(X_test)
# Model Prediction 
y_pred = regressor.predict(X_test)

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}) 
df

print("Training Score:",regressor.score(X_train,y_train))
print("Test Score:",regressor.score(X_test,y_test))

df.plot(kind='bar',figsize=(5,5))
plt.grid(which='major', linewidth='0.5', color='red')
plt.grid(which='minor', linewidth='0.5', color='blue')
plt.show()

hours = 9.25
test = np.array([hours])
test = test.reshape(-1, 1)
own_pred = regressor.predict(test)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

from sklearn import metrics  
print('Mean Absolute Error:',metrics.mean_absolute_error(y_test, y_pred)) 
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('R-2:', metrics.r2_score(y_test, y_pred))